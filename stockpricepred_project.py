# -*- coding: utf-8 -*-
"""Stockpricepred_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFhglZUSDTtOOBpLtUaSQD_dBTpruM02
"""

#This Progrm uses an artificial recurrent neural network called Long Short Term Memory (LSTM) 
#to predict closing stock price of APPL INC using the past days stock price

# Commented out IPython magic to ensure Python compatibility.
#1
#importing the libraries
import math
import pandas_datareader as web
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize']=20,10
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Dense
from sklearn.preprocessing import MinMaxScaler
from matplotlib.pylab import rcParams
rcParams['figure.figsize']=20,10

#2
#Get the stock quote
df=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2019-12-17')
#to show the data
df

#3
#To get the no. of rows and column in dataset
df.shape

#4
#visualizing closing price history
plt.rcParams["figure.figsize"] = (16,8)
plt.title('Close price History of Apple')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price USD ($)',fontsize=18)
plt.show()

#5
#creating a new dataframe with close column only
data=df.filter(['Close'])
#converting dataframe to numpy array
dataset=data.values
#getting the number of rows to train the model on
training_data_len=math.ceil(len(dataset)*.8)
training_data_len

#6
#scaling the data
scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(dataset)

scaled_data

#7
#creating the training dataset
train_data=scaled_data[0:training_data_len,:]
#Split the data into x_train and y_train data sets
x_train=[]  #training features
y_train=[] #target variabes

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if(i<=61):
    print(x_train)
    print(y_train)
    print()

#8
#converting the x_train and y_train to np arrays
x_train,y_train=np.array(x_train),np.array(y_train)

#9
#Reshaping the data(An LSTM network expects the input to be 3D and our data is 2D currently)
x_train.shape

#10
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#11
#building The LSTM model
model=Sequential()
#adding a layer to our model with 50 neurons
model.add(LSTM(50,return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#12
#Compiling the model with an optimizer and a loss function
model.compile(optimizer='adam',loss='mean_squared_error')

#13
#training the model
model.fit(x_train,y_train,batch_size=1,epochs=1)

#14
#Creating the scaled testing dataset
#creating a new array with scaled values from index 1543 to 2003
test_data=scaled_data[training_data_len-60:,:]
#Creating the datasets x_test and y_test
x_test=[] 
y_test=dataset[training_data_len:,:] #all the values we want our model to predict i.e actual test values
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#15
#Converting the data to a numpy array for using in LSTM model
x_test=np.array(x_test)

#16
#reshape the data to make it 3 dim
x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#17
#getting the models predicted price values for x_test dataset
predictions=model.predict(x_test)
predictions=scaler.inverse_transform(predictions)#unscaling the values

#18
#evaluating the model by root mean square error(RMSE)
rmse=np.sqrt(np.mean(predictions-y_test)**2)
rmse

#19
#plotting the data
train=data[:training_data_len]
valid=data[training_data_len:]#validation dataset
valid['Predictions']=predictions


#visualizing the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('Closing Price USD($)',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')
plt.show()

#20
#showing the valid/actual price and predicted price
valid

#21
#trying and predicting closing price for apple stock for a specific date
#get the quote
apple_quote=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2019-12-17')
#creating a new dataframe
new_df=apple_quote.filter(['Close'])
#getting the last 60 day close price values and converting to an  array
last_60_days=new_df[-60:].values
#scaling the data to tye values between 0 and 
last_60_days_scaled=scaler.transform(last_60_days)
#creating an empty list
X_test=[]
#append last 60 days to the list
X_test.append(last_60_days_scaled)
#converting X_test dataset to numpy array
X_test=np.array(X_test)
#reshaping the data to 3 dimenmsion
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#getting the predicted scaled price
pred_price=model.predict(X_test)
#undo the scaling
pred_price=scaler.inverse_transform(pred_price)
print("Predicted price: ",pred_price)

#22
#the model believes the closing price to be above value on 2019-12-18,seeing the actual price

apple_quote2=web.DataReader('AAPL',data_source='yahoo',start='2019-12-18',end='2019-12-18')
print("The actual price on:",apple_quote2['Close'])

#23
#trying and predicting closing price for apple stock for a specific date
#get the quote
apple_quote=web.DataReader('AAPL',data_source='yahoo',start='2012-01-01',end='2020-12-17')
#creating a new dataframe
new_df=apple_quote.filter(['Close'])
#getting the last 60 day close price values and converting to an  array
last_60_days=new_df[-60:].values
#scaling the data to tye values between 0 and 
last_60_days_scaled=scaler.transform(last_60_days)
#creating an empty list
X_test=[]
#append last 60 days to the list
X_test.append(last_60_days_scaled)
#converting X_test dataset to numpy array
X_test=np.array(X_test)
#reshaping the data to 3 dimenmsion
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#getting the predicted scaled price
pred_price=model.predict(X_test)
#undo the scaling
pred_price=scaler.inverse_transform(pred_price)
print("Predicted price: ",pred_price)

#24
apple_quote2=web.DataReader('AAPL',data_source='yahoo',start='2020-12-18',end='2020-12-18')
print("The actual price on:",apple_quote2['Close'])